package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/amit-ksh/supergraph-top-n-challenge/services/posts/graph/model"
)

// Threads is the resolver for the posts field.
func (r *threadResolver) Posts(ctx context.Context, obj *model.Thread, limit int) ([]*model.Post, error) {
	var posts []*model.Post

	rows, err := r.DB.Query(context.Background(), "SELECT * FROM posts WHERE thread_id = $1 ORDER BY created DESC LIMIT $2", obj.ID, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var post model.Post

		err := rows.Scan(&post.ID, &post.ThreadID, &post.Created)
		if err != nil {
			return nil, err
		}

		posts = append(posts, &post)
	}

	return posts, nil
}

// Thread returns ThreadResolver implementation.
func (r *Resolver) Thread() ThreadResolver { return &threadResolver{r} }

type threadResolver struct{ *Resolver }
