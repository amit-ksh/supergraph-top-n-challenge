package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/amit-ksh/supergraph-top-n-challenge/services/threads/graph/model"
)

// Todos is the resolver for the todos field.
func (r *queryResolver) Threads(ctx context.Context, limit int) ([]*model.Thread, error) {
	var threads []*model.Thread

	rows, err := r.DB.Query(context.Background(), "SELECT * FROM threads ORDER BY created DESC LIMIT $1", limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var thread model.Thread

		err := rows.Scan(&thread.ID, &thread.Created)
		if err != nil {
			return nil, err
		}

		threads = append(threads, &thread)
	}

	return threads, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
